.\" Automatically generated by Pandoc 2.19.2
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "DWM" "1" "October 25, 2022" "dwm-VERSION" ""
.hy
.SH Name
.PP
dwm - dynamic window manager
.SH SYNOPSIS
.PP
dwm [-v]
.SH DESCRIPTION
.PP
dwm is a dynamic window manager for X.
It manages windows in tiled, monocle and floating layouts.
Either layout can be applied dynamically, optimising the environment for
the application in use and the task performed.
.PP
In tiled layouts windows are managed in a master and stacking area.
The master area on the left contains one window by default, and the
stacking area on the right contains all other windows.
The number of master area windows can be adjusted from zero to an
arbitrary number.
In monocle layout all windows are maximised to the screen size.
In floating layout windows can be resized and moved freely.
Dialog windows are always managed floating, regardless of the layout
applied.
.PP
Windows are grouped by tags.
Each window can be tagged with one or multiple tags.
Selecting certain tags displays all windows with these tags.
.PP
Each screen contains a small status bar which displays all available
tags, the layout, the title of the focused window, and the text read
from the root window name property, if the screen is focused.
A floating window is indicated with an empty square and a maximised
floating window is indicated with a filled square before the windows
title.
The selected tags are indicated with a different color.
The tags of the focused window are indicated with a filled square in the
top left corner.
The tags which are applied to one or more windows are indicated with an
empty square in the top left corner.
.PP
dwm draws a small border around windows to indicate the focus state.
.SH OPTIONS
.TP
-v
prints version information to stderr, then exits.
.SH USAGE
.SS Status bar
.TP
X root window name
is read and displayed in the status text area.
It can be set with the xsetroot(1) command.
.TP
Button1
click on a tag label to display all windows with that tag, click on the
layout label toggles between tiled and floating layout.
.TP
Button3
click on a tag label adds/removes all windows with that tag to/from the
view.
.TP
Mod4-Button1
click on a tag label applies that tag to the focused window.
.TP
Mod4-Button3
click on a tag label adds/removes that tag to/from the focused window.
.SS Keyboard commands
.TP
Mod4-Return
Spawn st(1) as the terminal emmulator.
.TP
Mod4-d
Spawn dmenu(1) for launching other programs.
.TP
Mod4-c
Close focused window.
.TP
Mod4-Shift-q
Quit dwm.
.TP
Mod4-Shift-r
Reload dwm.
.SS For more keybindings
.PP
view the config.h
.SS Mouse commands
.TP
Mod4-Button1
Move focused window while dragging.
Tiled windows will be toggled to the floating state.
.TP
Mod4-Button2
Toggles focused window between floating and tiled state.
.TP
Mod4-Button3
Resize focused window while dragging.
Tiled windows will be toggled to the floating state.
.SH CUSTOMIZATION
.PP
dwm is customized by creating a custom config.h and (re)compiling the
source code.
This keeps it fast, secure and simple.
To customize the color, edit Xresources file and set the color.
.SS Xresources
.PP
Dwm will look for the config file first in the
\[ti]/.config/X11/xresources file.
If not found, it will look for the \[ti]/.Xresources file.
You have to press \f[V]Mod4 + F5\f[R] to make the changes take effect.
This basically runs the \f[V]xrdb -merge <xresources>\f[R] command.
.PP
Available Xresources variables:
.PD 0
.P
.PD
!
TokyoNight colors for Xresources
.PD 0
.P
.PD
\  *background: #1a1b26
.PD 0
.P
.PD
\  *foreground: #c0caf5
.PD 0
.P
.PD
\  *selbackground: #c0caf5
.PD 0
.P
.PD
\  *selforeground: #1a1b26
.PD 0
.P
.PD
\  *color0: #15161e
.PD 0
.P
.PD
\  *color1: #f7768e
.PD 0
.P
.PD
\  *color2: #9ece6a
.PD 0
.P
.PD
\  *color3: #e0af68
.PD 0
.P
.PD
\  *color4: #7aa2f7
.PD 0
.P
.PD
\  *color5: #bb9af7
.PD 0
.P
.PD
\  *color6: #7dcfff
.PD 0
.P
.PD
\  *color7: #a9b1d6
.PD 0
.P
.PD
\  *color8: #414868
.PD 0
.P
.PD
\  *color9: #f7768e
.PD 0
.P
.PD
\  *color10: #9ece6a
.PD 0
.P
.PD
\  *color11: #e0af68
.PD 0
.P
.PD
\  *color12: #7aa2f7
.PD 0
.P
.PD
\  *color13: #bb9af7
.PD 0
.P
.PD
\  *color14: #7dcfff
.PD 0
.P
.PD
\  *color15: #c0caf5
.PP
!
Xmenu specific
.PD 0
.P
.PD
\  xmenu.font: JetBrainsMono Nerd Font:size=9, NotoColorEmoji:size=11
.PD 0
.P
.PD
\  xmenu.separator: #c0caf5
.PD 0
.P
.PD
\  xmenu.borderWidth: 2
.PD 0
.P
.PD
\  xmenu.border: #7aa2f7
.PD 0
.P
.PD
\  xmenu.selbackground: #7aa2f7
.PD 0
.P
.PD
\  xmenu.selforeground: #1a1b26
.PD 0
.P
.PD
.SH SEE ALSO
.PP
dmenu(1), st(1), xmenu(1)
.SH ISSUES
.PP
Java applications which use the XToolkit/XAWT backend may draw grey
windows only.
The XToolkit/XAWT backend breaks ICCCM-compliance in recent JDK 1.5 and
early JDK 1.6 versions, because it assumes a reparenting window manager.
Possible workarounds are using JDK 1.4 (which doesn\[cq]t contain the
XToolkit/XAWT backend) or setting the environment variable
AWT_TOOLKIT=MToolkit (to use the older Motif backend instead) or running
xprop -root -f _NET_WM_NAME 32a -set _NET_WM_NAME LG3D or wmname LG3D
(to pretend that a non-reparenting window manager is running that the
XToolkit/XAWT backend can recognize) or when using OpenJDK setting the
environment variable _JAVA_AWT_WM_NONREPARENTING=1 .
.SH BUGS
.PP
Send all bug reports with a patch to hackers\[at]suckless.org.
.SH AUTHORS
Saif Shahriar.
